#include "./imports/stdlib.fc";
#include "jetton-utils.fc";
#include "error-codes.fc";
#include "op-codes.fc";
#include "params.fc";
#include "messages.fc";

;; Note that 2 * gas_consumptions is expected to be able to cover fees on both wallets (sender and receiver)
;; and also constant fees on inter-wallet interaction, in particular fwd fee on state_init transfer
;; that means that you need to reconsider this fee when:
;; a) jetton logic become more costly
;; b) jetton-wallet code become larger or smalle
;; c) global fee changes / different workchain
const int gas_consumption = 20000000;

{-
  Storage
  storage#_ balance:Coins owner_address:MsgAddressInt jetton_master_address:MsgAddressInt jetton_wallet_code:^Cell = Storage;
-}

(int, int, slice, slice, slice, cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return (
    ds~load_coins(),
    ds~load_coins(),
    ds~load_msg_addr(), ;; owner_address
    ds~load_msg_addr(), ;; stake_address
    ds~load_msg_addr(), ;; jetton_master_address
    ds~load_ref());
}

() save_data (
  int balance, int staked, slice owner_address, slice stake_address, slice jetton_master_address, cell jetton_wallet_code
) impure inline {
  set_data(
    pack_jetton_wallet_data(
      balance,
      staked,
      owner_address,
      stake_address,
      jetton_master_address,
      jetton_wallet_code
    )
  );
}

{-
  transfer query_id:uint64 amount:(VarUInteger 16) destination:MsgAddress
           response_destination:MsgAddress custom_payload:(Maybe ^Cell)
           forward_ton_amount:(VarUInteger 16) forward_payload:(Either Cell ^Cell)
           = InternalMsgBody;
  internal_transfer  query_id:uint64 amount:(VarUInteger 16) from:MsgAddress
                     response_address:MsgAddress
                     forward_ton_amount:(VarUInteger 16)
                     forward_payload:(Either Cell ^Cell)
                     = InternalMsgBody;
-}

;; read from in_msg_body params of transfer, build transfer message and send it to counterparty jetton wallet
() send_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline_ref {
  int query_id = in_msg_body~load_query_id();
  int jetton_amount = in_msg_body~load_coins();
  slice to_owner_address = in_msg_body~load_msg_addr();

  throw_unless(error::invalid_address, ~ is_address_none(to_owner_address));
  throw_unless(error::malformed_address, is_valid_address_format(to_owner_address));
  throw_unless(error::wrong_workchain, is_valid_workchain(to_owner_address));

  force_chain(to_owner_address);

  (int balance, int staked, slice owner_address, slice stake_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
  balance -= jetton_amount;

  throw_unless(error::self_transfer, ~ equal_slices_bits(to_owner_address, owner_address));
  throw_unless(error::unauthorized_transfer, equal_slices_bits(owner_address, sender_address));
  throw_unless(error::not_enough_jettons, balance >= 0);

  cell state_init = calculate_jetton_wallet_state_init(to_owner_address, jetton_master_address, jetton_wallet_code);
  slice to_wallet_address = calc_address(state_init);
  slice response_address = in_msg_body~load_msg_addr();
  cell custom_payload = in_msg_body~load_maybe_ref();
  int forward_ton_amount = in_msg_body~load_coins();

  throw_unless(error::malformed_forward_payload, slice_bits(in_msg_body) >= 1);

  slice either_forward_payload = in_msg_body;

  var msg_body = begin_cell()
                .store_op(op::internal_transfer)
                .store_query_id(query_id)
                .store_coins(jetton_amount)
                .store_slice(owner_address)
                .store_slice(response_address)
                .store_coins(forward_ton_amount)
                .store_slice(either_forward_payload)
                .end_cell();
  var msg = begin_cell()
            .store_msg_flag(msg_flag::bounceable)
            .store_slice(to_wallet_address)
            .store_coins(0)
            .store_msgbody_prefix_stateinit(state_init, msg_body);

  int fwd_count = forward_ton_amount ? 2 : 1;
  throw_unless(error::not_enough_tons, msg_value >
                     forward_ton_amount +
    ;; 3 messages: wal1->wal2,  wal2->owner, wal2->response
    ;; but last one is optional (it is ok if it fails)
                     fwd_count * fwd_fee +
    (2 * gas_consumption + min_tons_for_storage));
  ;; universal message send fee calculation may be activated here
  ;; by using this instead of fwd_fee
  ;; msg_fwd_fee(to_wallet, msg_body, state_init, 15)

  send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS); ;; revert on errors
  save_data(balance, staked, owner_address, stake_address, jetton_master_address, jetton_wallet_code);
}

{-
  internal_transfer  query_id:uint64 amount:(VarUInteger 16) from:MsgAddress
                     response_address:MsgAddress
                     forward_ton_amount:(VarUInteger 16)
                     forward_payload:(Either Cell ^Cell)
                     = InternalMsgBody;
-}

;; read incoming transfer message, authorize by address, update balance and send notifications/excesses
() receive_tokens (slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure inline_ref {
  ;; NOTE we can not allow fails in action phase since in that case there will be
  ;; no bounce. Thus check and throw in computation phase.
  (int balance, int staked, slice owner_address, slice stake_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
  int query_id = in_msg_body~load_query_id();
  int jetton_amount = in_msg_body~load_coins();
  balance += jetton_amount;
  slice from_address = in_msg_body~load_msg_addr();
  slice response_address = in_msg_body~load_msg_addr();

  throw_unless(error::invalid_address, ~ is_address_none(sender_address));
  throw_unless(error::malformed_address, is_valid_address_format(sender_address));
  throw_unless(error::malformed_address, is_valid_workchain(sender_address));

  throw_unless(error::unauthorized_incoming_transfer,
    equal_slices_bits(jetton_master_address, sender_address)
      |
      equal_slices_bits(calc_user_wallet(from_address, jetton_master_address, jetton_wallet_code), sender_address)
  );

  int forward_ton_amount = in_msg_body~load_coins();
  int ton_balance_before_msg = my_ton_balance - msg_value;

  if (forward_ton_amount) {
    msg_value -= (forward_ton_amount + fwd_fee);
    slice either_forward_payload = in_msg_body;

    var msg_body = begin_cell()
                  .store_op(op::transfer_notification)
                  .store_query_id(query_id)
                  .store_coins(jetton_amount)
                  .store_slice(from_address)
                  .store_slice(either_forward_payload)
                  .end_cell();

    var msg = begin_cell()
              .store_msg_flag(msg_flag::non_bounceable) ;; we should not bounce here cause receiver can have uninitialized contract
              .store_slice(owner_address)
              .store_coins(forward_ton_amount)
              .store_msgbody_prefix_ref(msg_body);

    send_raw_message(msg.end_cell(), PAY_FEES_SEPARATELY);
  }

  raw_reserve(max(ton_balance_before_msg, min_tons_for_storage), 2);

  if ((response_address.preload_uint(2) != 0) & (msg_value > 0)) {
    var msg = begin_cell()
              .store_msg_flag(msg_flag::non_bounceable)
              .store_slice(response_address)
              .store_coins(0)
              .store_msgbody_prefix_slice()
              .store_op(op::excesses)
              .store_query_id(query_id);
    send_raw_message(msg.end_cell(), CARRY_REMAINING_BALANCE | IGNORE_ERRORS);
  }

  if (equal_slices_bits(jetton_master_address, sender_address)) {
    int skip = in_msg_body~load_uint(1);
    slice new_address = in_msg_body~load_msg_addr();

    save_data(balance, staked, owner_address, new_address, jetton_master_address, jetton_wallet_code);
  } else {
    save_data(balance, staked, owner_address, stake_address, jetton_master_address, jetton_wallet_code);
  }
}

() burn_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline_ref {
  ;; NOTE we can not allow fails in action phase since in that case there will be
  ;; no bounce. Thus check and throw in computation phase.
  (int balance, int staked, slice owner_address, slice stake_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
  int query_id = in_msg_body~load_query_id();
  int jetton_amount = in_msg_body~load_coins();
  slice response_address = in_msg_body~load_msg_addr();
  ;; ignore custom payload
  ;; slice custom_payload = in_msg_body~load_dict();
  balance -= jetton_amount;

  throw_unless(error::invalid_address, ~ is_address_none(sender_address));
  throw_unless(error::malformed_address, is_valid_address_format(sender_address));
  throw_unless(error::malformed_address, is_valid_workchain(sender_address));

  throw_unless(error::unauthorized_transfer, equal_slices_bits(owner_address, sender_address));
  throw_unless(error::not_enough_jettons, balance >= 0);
  throw_unless(error::burn_fee_not_matched, msg_value > fwd_fee + 2 * gas_consumption);

  var msg_body = begin_cell()
                .store_op(op::burn_notification)
                .store_query_id(query_id)
                .store_coins(jetton_amount)
                .store_slice(owner_address)
                .store_slice(response_address)
                .end_cell();

  var msg = begin_cell()
            .store_msg_flag(msg_flag::bounceable)
            .store_slice(jetton_master_address)
            .store_coins(0) ;; msg value
            .store_msgbody_prefix_ref(msg_body);

  send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS);
  save_data(balance, staked, owner_address, stake_address, jetton_master_address, jetton_wallet_code);
}

() validate_bounce_parameters(slice in_msg_body, int op) impure inline_ref {
  ;; Validate operation type
  throw_unless(error::unknown_action_bounced,
    (op == op::internal_transfer) | (op == op::burn_notification) | (op == op::deposit_stake) | (op == op::withdraw_stake)
  );

  ;; Validate message has sufficient data for operation code (32 bits)
  throw_unless(error::malformed_message, slice_bits(in_msg_body) >= 32);

  ;; Validate operation-specific parameters
  if ((op == op::deposit_stake) | (op == op::withdraw_stake)) {
    ;; Need at least 33 bits: 32 for op + 1 for minimum jetton_amount (variable-length)
    throw_unless(error::insufficient_data, slice_bits(in_msg_body) >= 33);
  }

  if ((op == op::internal_transfer) | (op == op::burn_notification)) {
    ;; Need at least 97 bits: 32 for op + 64 for query_id + 1 for minimum jetton_amount (variable-length)
    throw_unless(error::insufficient_data, slice_bits(in_msg_body) >= 97);
  }
}

() on_bounce (slice in_msg_body, slice sender_address) impure inline_ref {
  in_msg_body~skip_bounce_flag();

  ;; Validate bounce message format
  throw_unless(error::malformed_message, ~ slice_empty?(in_msg_body));

  (int balance, int staked, slice owner_address, slice stake_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
  int op = in_msg_body~load_op();

  validate_bounce_parameters(in_msg_body, op);

  if (op == op::deposit_stake) {
    int jetton_amount = in_msg_body~load_coins();

    throw_unless(error::unauthorized_transfer, equal_slices_bits(sender_address, stake_address));
    throw_unless(error::not_enough_jettons, staked >= jetton_amount);

    balance += jetton_amount;
    staked -= jetton_amount;
  }

  if (op == op::withdraw_stake) {
    int jetton_amount = in_msg_body~load_coins();

    throw_unless(error::unauthorized_transfer, equal_slices_bits(sender_address, stake_address));
    throw_unless(error::not_enough_jettons, balance >= jetton_amount);

    staked += jetton_amount;
    balance -= jetton_amount;
  }

  if ((op == op::internal_transfer) | (op == op::burn_notification)) {
    int query_id = in_msg_body~load_query_id();
    int jetton_amount = in_msg_body~load_coins();

    balance += jetton_amount;
  }

  save_data(balance, staked, owner_address, stake_address, jetton_master_address, jetton_wallet_code);
}

;; stake functions
() stake_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline_ref {
  int query_id = in_msg_body~load_query_id();
  int jetton_amount = in_msg_body~load_coins();

  (int balance, int staked, slice owner_address, slice stake_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();

  throw_unless(error::invalid_stake_amount, jetton_amount > 0 & (jetton_amount <= balance));
  throw_unless(error::unauthorized_transfer, equal_slices_bits(owner_address, sender_address));

  balance -= jetton_amount;
  staked += jetton_amount;

  throw_unless(error::invalid_stake_amount, balance >= 0);

  var msg = begin_cell()
            .store_msg_flag(msg_flag::bounceable)
            .store_slice(stake_address)
            .store_coins(0)
            .store_msgbody_prefix_slice()
              .store_op(op::deposit_stake)
              .store_coins(jetton_amount)
              .store_slice(owner_address);

  throw_unless(error::not_enough_tons, msg_value >
    ;; 3 messages: wal1->wal2,  wal2->owner, wal2->response
    ;; but last one is optional (it is ok if it fails)
                     2 * fwd_fee +
    (2 * gas_consumption + min_tons_for_storage));
  ;; universal message send fee calculation may be activated here
  ;; by using this instead of fwd_fee
  ;; msg_fwd_fee(to_wallet, msg_body, state_init, 15)

  send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS); ;; revert on errors
  save_data(balance, staked, owner_address, stake_address, jetton_master_address, jetton_wallet_code);
}

() claim_staked_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline_ref {
  int query_id = in_msg_body~load_query_id();

  (int balance, int staked, slice owner_address, slice stake_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
  throw_unless(error::invalid_unstake_amount, staked > 0);
  throw_unless(error::unauthorized_transfer, equal_slices_bits(owner_address, sender_address));

  var msg = begin_cell()
            .store_msg_flag(msg_flag::bounceable)
            .store_slice(stake_address)
            .store_coins(0)
            .store_msgbody_prefix_slice()
              .store_op(op::withdraw_stake)
              .store_coins(staked)
              .store_slice(owner_address);

  throw_unless(error::not_enough_tons, msg_value >
    ;; 3 messages: wal1->wal2,  wal2->owner, wal2->response
    ;; but last one is optional (it is ok if it fails)
                     2 * fwd_fee +
    (2 * gas_consumption + min_tons_for_storage));
  ;; universal message send fee calculation may be activated here
  ;; by using this instead of fwd_fee
  ;; msg_fwd_fee(to_wallet, msg_body, state_init, 15)

  send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS); ;; revert on errors

  balance += staked;
  staked = 0;

  save_data(balance, staked, owner_address, stake_address, jetton_master_address, jetton_wallet_code);
}

() deposit_stake_wrong_stage (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline_ref {
  (int balance, int staked, slice owner_address, slice stake_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
  throw_unless(error::unauthorized_transfer, equal_slices_bits(sender_address, stake_address));
  int jetton_amount = in_msg_body~load_coins();

  raw_reserve(min_tons_for_storage, 2);

  var msg = begin_cell()
      .store_uint(0x10, 6)
      .store_slice(owner_address)
      .store_coins(0)
      .store_msgbody_prefix_slice();

  send_raw_message(msg.end_cell(), CARRY_REMAINING_BALANCE);
  save_data(balance + jetton_amount, staked - jetton_amount, owner_address, stake_address, jetton_master_address, jetton_wallet_code);
}

() withdraw_stake_wrong_stage (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline_ref {
  (int balance, int staked, slice owner_address, slice stake_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
  throw_unless(error::unauthorized_transfer, equal_slices_bits(sender_address, stake_address));
  int jetton_amount = in_msg_body~load_coins();

  raw_reserve(min_tons_for_storage, 2);

  var msg = begin_cell()
      .store_uint(0x10, 6)
      .store_slice(owner_address)
      .store_coins(0)
      .store_msgbody_prefix_slice();

  send_raw_message(msg.end_cell(), CARRY_REMAINING_BALANCE);
  save_data(balance - jetton_amount, staked + jetton_amount, owner_address, stake_address, jetton_master_address, jetton_wallet_code);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);

  slice sender_address = cs~load_msg_addr();

  if (flags & 1) {
    on_bounce(in_msg_body, sender_address);
    return ();
  }


  cs~load_msg_addr(); ;; skip dst
  cs~load_coins(); ;; skip value
  cs~skip_bits(1); ;; skip extracurrency collection
  cs~load_coins(); ;; skip ihr_fee

  int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs
  int op = in_msg_body~load_op();

  if (op == op::transfer) { ;; outgoing transfer
    send_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
    return ();
  }

  if (op == op::internal_transfer) { ;; incoming transfer
    receive_tokens(in_msg_body, sender_address, my_balance, fwd_fee, msg_value);
    return ();
  }

  if (op == op::burn) { ;; burn
    burn_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
    return ();
  }

  if (op == op::stake) { ;; deposit stake
    stake_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
    return ();
  }

  if (op == op::claim) { ;; claim stake
    claim_staked_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
    return ();
  }

  if (op == op::deposit_stake_wrong_stage) { ;; deposit stake wrong stage
    deposit_stake_wrong_stage(in_msg_body, sender_address, msg_value, fwd_fee);
    return ();
  }

  if (op == op::withdraw_stake_wrong_stage) {
    withdraw_stake_wrong_stage(in_msg_body, sender_address, msg_value, fwd_fee);
    return ();
  }

  ;; Withdraw tons or jettons which accidentally were sent to this jettonWallet
  if (op == op::withdraw_tons) {
    (int balance, int staked, slice owner_address, slice stake_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();

    throw_unless(error::unauthorized_transfer, equal_slices_bits(owner_address, sender_address));

    raw_reserve(min_tons_for_storage, 0);

    var msg = begin_cell()
              .store_msg_flag(msg_flag::non_bounceable)
              .store_slice(owner_address)
              .store_coins(0)
              .store_msgbody_prefix_slice()
              .store_op(op::excesses)
              .store_query_id(in_msg_body~load_query_id());
    return send_raw_message(msg.end_cell(), CARRY_REMAINING_BALANCE | IGNORE_ERRORS);
  }

  if (op == op::withdraw_stake_notification) {
    ;; throw_unless(error::unauthorized_transfer, equal_slices_bits(owner_address, sender_address));
    return ();
  }

  throw(error::unknown_action);
}

(int, int, slice, slice, slice, cell) get_wallet_ext_data() method_id {
  return load_data();
}

(int, slice, slice, cell) get_wallet_data() method_id {
  (int balance, int staked, slice owner_address, slice stake_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();

  return (balance, owner_address, jetton_master_address, jetton_wallet_code);
}